// =====================================================
// B√öSQUEDAS AVANZADAS Y AN√ÅLISIS DE TEXTO - LA TIENDA DEL BOROJ√ì
// =====================================================
//
// üîç ESCENARIO REAL: Como administrador de la tienda, necesitas
// realizar b√∫squedas sofisticadas en tu base de datos para
// encontrar patrones espec√≠ficos, analizar nombres de productos,
// y entender mejor el comportamiento de tus clientes.
//
// üéØ OBJETIVO DE NEGOCIO: Obtener insights valiosos mediante
// b√∫squedas avanzadas que te permitan segmentar productos,
// identificar tendencias y mejorar la experiencia del cliente.
//
// üí° IMPORTANTE: Las expresiones regulares son muy poderosas pero
// pueden ser complejas. Ejecuta estos comandos uno por uno para
// entender cada patr√≥n de b√∫squeda.
// =====================================================

// =====================================================
// EJERCICIO 1: NOMBRES QUE EMPIECEN CON "BORO"
// =====================================================
//
// DESCRIPCI√ìN: Buscar productos cuyo nombre comience exactamente con "Boro"
//
// PASO A PASO:
// 1. Usamos /^Boro/ donde ^ significa "inicio de cadena"
// 2. No usamos la bandera "i" (case-insensitive)
// 3. Solo encuentra nombres que empiecen exactamente con "Boro"
// 4. Es √∫til para b√∫squedas espec√≠ficas por prefijo
//
// RESULTADO ESPERADO: Deber√≠as ver:
// - Boroj√≥ fresco
// - Boroj√≥ deshidratado

db.productos.find({ "nombre": /^Boro/ })

// =====================================================
// EJERCICIO 2: NOMBRES QUE CONTENGAN "CON"
// =====================================================
//
// DESCRIPCI√ìN: Encontrar productos cuyo nombre contenga la palabra "con"
//
// PASO A PASO:
// 1. Usamos /con/ para buscar "con" en cualquier parte del nombre
// 2. La bandera "i" hace la b√∫squeda insensible a may√∫sculas/min√∫sculas
// 3. Encuentra "con" en cualquier posici√≥n del texto
// 4. √ötil para b√∫squedas flexibles por contenido
//
// RESULTADO ESPERADO: Deber√≠as ver:
// - Galletas con boroj√≥
// - Concentrado de boroj√≥

db.productos.find({ "nombre": /con/i })

// =====================================================
// EJERCICIO 3: NOMBRES CON LA LETRA "Z"
// =====================================================
//
// DESCRIPCI√ìN: Encontrar clientes cuyo nombre contenga la letra "z"
//
// PASO A PASO:
// 1. Usamos /z/ para buscar la letra "z" en cualquier parte del nombre
// 2. La bandera "i" hace la b√∫squeda insensible a may√∫sculas/min√∫sculas
// 3. Encuentra "z" en cualquier posici√≥n del nombre
// 4. √ötil para b√∫squedas fon√©ticas o por letras espec√≠ficas
//
// RESULTADO ESPERADO: Deber√≠as ver clientes como:
// - Su√°rez (contiene "z")

db.clientes.find({ "nombre": /z/i })

// =====================================================
// CONSULTAS ADICIONALES CON REGEX PARA LA TIENDA
// =====================================================
//
// Estas consultas avanzadas te ayudar√°n a realizar b√∫squedas
// sofisticadas y encontrar patrones espec√≠ficos en tus datos.

// =====================================================
// CONSULTA 4: B√öSQUEDA POR "BOROJ√ì" EN CUALQUIER PARTE
// =====================================================
//
// DESCRIPCI√ìN: Productos que contengan "boroj√≥" en cualquier posici√≥n
//
// PASO A PASO:
// 1. /boroj√≥/ busca la palabra completa en cualquier parte
// 2. La bandera "i" hace la b√∫squeda insensible a may√∫sculas/min√∫sculas
// 3. Encuentra "boroj√≥" al inicio, medio o final del nombre
// 4. Es m√°s flexible que la b√∫squeda por prefijo
//
// RESULTADO ESPERADO: Deber√≠as ver todos los productos que contengan "boroj√≥"

db.productos.find({ "nombre": /boroj√≥/i })

// =====================================================
// CONSULTA 5: NOMBRES QUE TERMINEN EN VOCAL
// =====================================================
//
// DESCRIPCI√ìN: Clientes cuyo nombre termine en vocal (a, e, i, o, u)
//
// PASO A PASO:
// 1. [aeiou] crea una clase de caracteres con todas las vocales
// 2. $ significa "final de cadena"
// 3. La bandera "i" hace la b√∫squeda insensible a may√∫sculas/min√∫sculas
// 4. √ötil para an√°lisis fon√©ticos o b√∫squedas por terminaci√≥n
//
// RESULTADO ESPERADO: Deber√≠as ver clientes como:
// - Su√°rez (termina en "z" - no es vocal)
// - L√≥pez (termina en "z" - no es vocal)
// - G√≥mez (termina en "z" - no es vocal)

db.clientes.find({ "nombre": /[aeiou]$/i })

// =====================================================
// CONSULTA 6: NOMBRES CON EXACTAMENTE 3 PALABRAS
// =====================================================
//
// DESCRIPCI√ìN: Productos cuyo nombre tenga exactamente 3 palabras
//
// PASO A PASO:
// 1. ^ significa "inicio de cadena"
// 2. (\w+\s+){2} significa "2 grupos de palabras seguidas de espacios"
// 3. \w+ significa "una palabra al final"
// 4. $ significa "final de cadena"
// 5. Es una regex compleja para patrones espec√≠ficos
//
// RESULTADO ESPERADO: Deber√≠as ver productos como:
// - Galletas con boroj√≥ (3 palabras)
// - Aceite de boroj√≥ (3 palabras)

db.productos.find({ "nombre": /^(\w+\s+){2}\w+$/ })

// =====================================================
// CONSULTA 7: EMAILS QUE TERMINEN EN .COM
// =====================================================
//
// DESCRIPCI√ìN: Clientes con direcciones de email que terminen en .com
//
// PASO A PASO:
// 1. \. significa "punto literal" (escapado porque . es especial en regex)
// 2. com$ significa "com al final de la cadena"
// 3. No usamos bandera "i" porque los emails son case-sensitive
// 4. √ötil para validar formatos de email
//
// RESULTADO ESPERADO: Deber√≠as ver todos los clientes con emails .com

db.clientes.find({ "email": /\.com$/ })

// =====================================================
// CONSULTA 8: TAGS QUE EMPIECEN CON "N"
// =====================================================
//
// DESCRIPCI√ìN: Productos con tags que empiecen con la letra "n"
//
// PASO A PASO:
// 1. ^ significa "inicio de cadena"
// 2. n significa "la letra n literal"
// 3. No usamos bandera "i" para mantener la b√∫squeda exacta
// 4. √ötil para categorizar productos por tipo de tag
//
// RESULTADO ESPERADO: Deber√≠as ver productos con tags como:
// - "natural", "org√°nico"

db.productos.find({ "tags": /^n/ })

// =====================================================
// CONSULTA 9: B√öSQUEDA AVANZADA CON PATRONES COMPLEJOS
// =====================================================
//
// DESCRIPCI√ìN: Productos con nombre que contenga "de" y "con"
//
// PASO A PASO:
// 1. de.*con significa "de seguido de cualquier cosa y luego con"
// 2. con.*de significa "con seguido de cualquier cosa y luego de"
// 3. | significa "O l√≥gico" (una condici√≥n O la otra)
// 4. La bandera "i" hace la b√∫squeda insensible a may√∫sculas/min√∫sculas
// 5. Es una regex muy avanzada para patrones complejos
//
// RESULTADO ESPERADO: Deber√≠as ver productos como:
// - "Concentrado de boroj√≥" (contiene "con" y "de")

db.productos.find({ "nombre": /de.*con|con.*de/i })

// =====================================================
// RESUMEN DE LO APRENDIDO
// =====================================================
//
// ‚úÖ ^ : Inicio de cadena
// ‚úÖ $ : Final de cadena
// ‚úÖ . : Cualquier car√°cter (excepto nueva l√≠nea)
// ‚úÖ * : Cero o m√°s repeticiones
// ‚úÖ + : Una o m√°s repeticiones
// ‚úÖ [] : Clase de caracteres
// ‚úÖ | : O l√≥gico
// ‚úÖ () : Grupos de captura
// ‚úÖ \w : Car√°cter de palabra
// ‚úÖ \s : Espacio en blanco
// ‚úÖ i : Bandera case-insensitive
//
