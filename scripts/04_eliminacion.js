// =====================================================
// LIMPIEZA Y MANTENIMIENTO DE INVENTARIO - LA TIENDA DEL BOROJ√ì
// =====================================================
//
// üßπ ESCENARIO REAL: Como administrador de la tienda, necesitas
// mantener tu base de datos limpia y actualizada. Algunos clientes
// ya no compran, algunos productos se agotaron, y necesitas
// hacer limpieza del inventario para optimizar el espacio.
//
// üéØ OBJETIVO DE NEGOCIO: Mantener solo datos relevantes y
// actualizados para mejorar el rendimiento de la tienda y
// enfocarte en productos y clientes activos.
//
// ‚ö†Ô∏è  ADVERTENCIA CR√çTICA: Las operaciones de eliminaci√≥n son
// IRREVERSIBLES. Siempre verifica los filtros antes de ejecutar
// deleteOne() o deleteMany() para evitar p√©rdida de datos.
// =====================================================

// =====================================================
// SITUACI√ìN 1: CLIENTE QUE YA NO COMPRA EN LA TIENDA
// =====================================================
//
// üë§ ESCENARIO: Juan Torres era un cliente regular, pero hace
// 6 meses que no realiza compras. Despu√©s de intentar contactarlo
// sin √©xito, decides eliminarlo de la base de datos para mantener
// solo clientes activos y relevantes.
//
// üíº IMPACTO EN EL NEGOCIO:
// - Base de datos m√°s limpia y eficiente
// - Enfoque en clientes activos
// - Mejor rendimiento del sistema
// - Datos m√°s precisos para an√°lisis
//
// üîß QU√â HACEMOS: Eliminar el cliente Juan Torres por su correo electr√≥nico
// - deleteOne() elimina solo un cliente espec√≠fico
// - Filtramos por email exacto para evitar errores
// - Es m√°s seguro que deleteMany() para operaciones espec√≠ficas
// - Confirmamos la eliminaci√≥n antes de continuar
//
// ‚úÖ RESULTADO ESPERADO: Confirmaci√≥n de que Juan Torres fue eliminado
// de la base de datos. Tu lista de clientes ahora est√° m√°s actualizada.

db.clientes.deleteOne({ "email": "juan@email.com" })

// =====================================================
// SITUACI√ìN 2: LIMPIEZA AUTOM√ÅTICA DE INVENTARIO
// =====================================================
//
// üì¶ ESCENARIO: Es fin de mes y necesitas hacer limpieza del
// inventario. Los productos con menos de 5 unidades no son
// rentables de mantener y ocupan espacio valioso. Decides
// eliminarlos para enfocarte en productos con mejor rotaci√≥n.
//
// üí∞ IMPACTO EN EL NEGOCIO:
// - Libera espacio en el almac√©n
// - Enfoque en productos rentables
// - Mejor gesti√≥n de inventario
// - Reducci√≥n de costos de almacenamiento
//
// üîß QU√â HACEMOS: Eliminar productos con stock muy bajo (menos de 5 unidades)
// - deleteMany() elimina m√∫ltiples productos a la vez
// - Filtramos por stock menor a 5 usando $lt (less than)
// - Esto simula una limpieza autom√°tica de inventario
// - √ötil para mantener solo productos con stock viable
//
// ‚úÖ RESULTADO ESPERADO: Confirmaci√≥n de cu√°ntos productos se eliminaron
// por tener stock muy bajo. Tu inventario ahora est√° m√°s optimizado.

db.productos.deleteMany({ "stock": { $lt: 5 } })

// =====================================================
// VERIFICACI√ìN DE CAMBIOS - CONTROL DE CALIDAD
// =====================================================
//
// üîç IMPORTANTE: En una tienda real, siempre debes verificar que
// las eliminaciones se realizaron correctamente. Esto evita errores
// en la gesti√≥n de clientes y problemas con el inventario.
//
// üìã PASO 1: Verificar que el cliente fue eliminado correctamente
// - Deber√≠as ver un n√∫mero menor al original
// - Si eliminaste 1 cliente, deber√≠as tener 10 en lugar de 11
// - Esto confirma que la limpieza de clientes fue exitosa

db.clientes.countDocuments()

// PASO 2: Contar productos restantes
// - Deber√≠as ver un n√∫mero menor al original
// - Depende de cu√°ntos productos ten√≠an stock < 5

db.productos.countDocuments()

// PASO 3: Verificar productos con stock bajo (verificaci√≥n de limpieza)
// - Deber√≠as ver solo productos con stock >= 5
// - Esto confirma que la limpieza funcion√≥ correctamente

db.productos.find({ "stock": { $lt: 10 } })

// PASO 4: Verificar que Juan Torres fue eliminado
// - Esta consulta no deber√≠a devolver resultados
// - Confirma que el cliente espec√≠fico fue eliminado

db.clientes.find({ "email": "juan@email.com" })

// =====================================================
// OPERACIONES DE LIMPIEZA ADICIONALES
// =====================================================
//
// üßπ Estas operaciones adicionales te ayudar√°n a mantener tu
// base de datos limpia y eficiente, eliminando datos obsoletos
// o problem√°ticos para optimizar el rendimiento de la tienda.

// =====================================================
// SITUACI√ìN 3: PRODUCTOS COMPLETAMENTE AGOTADOS
// =====================================================
//
// üö´ ESCENARIO: Algunos productos se han agotado completamente
// y no hay planes de reabastecimiento inmediato. Estos productos
// ocupan espacio en la base de datos sin aportar valor al negocio.
//
// üí∞ IMPACTO EN EL NEGOCIO:
// - Libera espacio en la base de datos
// - Elimina confusi√≥n para los clientes
// - Enfoque en productos disponibles
// - Mejor experiencia de usuario
//
// üîß QU√â HACEMOS: Eliminar productos con stock exactamente igual a 0
// - Filtramos productos con stock = 0 (completamente agotados)
// - deleteMany() elimina todos los que cumplan la condici√≥n
// - Esto libera espacio en la base de datos
// - √ötil para productos descontinuados o agotados permanentemente
//
// ‚úÖ RESULTADO ESPERADO: Se eliminan productos con stock 0
// (si los hay en tu base de datos actual). Tu cat√°logo queda m√°s limpio.

db.productos.deleteMany({ "stock": 0 })

// =====================================================
// SITUACI√ìN 4: AN√ÅLISIS DE CLIENTES INACTIVOS
// =====================================================
//
// üìä ESCENARIO: Antes de eliminar m√°s clientes, necesitas
// analizar cu√°ntos est√°n realmente inactivos. Esto te permite
// tomar decisiones informadas sobre estrategias de retenci√≥n
// o eliminaci√≥n de la base de datos.
//
// üéØ ESTRATEGIA DE AN√ÅLISIS:
// - Identificar clientes sin compras recientes
// - Evaluar oportunidades de reactivaci√≥n
// - Tomar decisiones basadas en datos
// - Optimizar la base de clientes
//
// üîß QU√â HACEMOS: Identificar clientes que no han realizado compras
// - Primero CONSULTAMOS para ver cu√°ntos clientes inactivos hay
// - No eliminamos inmediatamente, solo analizamos
// - $size: 0 significa array de compras vac√≠o
// - √ötil para estrategias de marketing y retenci√≥n
//
// ‚úÖ RESULTADO ESPERADO: Lista de clientes sin compras
// (puedes decidir si eliminarlos o implementar estrategias de reactivaci√≥n)

db.clientes.find({ "compras": { $size: 0 } })

// =====================================================
// RESUMEN DE OPERACIONES REALIZADAS
// =====================================================
//
// üéØ LO QUE ACABAS DE HACER:
// ‚úÖ Eliminaste al cliente inactivo Juan Torres
// ‚úÖ Realizaste limpieza autom√°tica de inventario (stock < 5)
// ‚úÖ Identificaste productos completamente agotados
// ‚úÖ Analizaste clientes inactivos para futuras decisiones
//
// üíº IMPACTO EN TU NEGOCIO:
// - Base de datos m√°s limpia y eficiente
// - Enfoque en clientes y productos activos
// - Mejor rendimiento del sistema
// - Datos m√°s precisos para an√°lisis
//
// üöÄ PR√ìXIMO PASO: Ahora puedes continuar con otras operaciones
// como an√°lisis de ventas, gesti√≥n de proveedores, o implementar
// estrategias de reactivaci√≥n para clientes inactivos.
